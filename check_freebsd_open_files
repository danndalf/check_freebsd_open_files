#!/usr/bin/perl -w
use strict;

=head1 NAME

check_freebsd_open_files - Nagios plugin to report on FreeBSD open files

=cut

# The POD text continues at the end of the file.

use strict;

use Data::Dumper;   ### For generating debug output in verbose mode
use Nagios::Plugin; ### For communicating with the nagios server


### Know what we're working with
my %filters = (
	'user' => {
		label_key => 'USER',
	},
	'mode' => {
		label_key => 'R/W',
		accepted_values => {
			r => 'read only',
			rw => 'read and write',
			w => 'write only',
		},
	},
	'process' => {
		label_key => 'CMD',
	},
	'descriptor' => {
		label_key => 'FD',
		accepted_values => {
			jail    => "jail root directory",
            mmap    => "memory-mapped file",
            root    => "root inode",
            text    => "executable text inode",
            tr      => "kernel trace file",
            wd      => "current working directory",
		},
	},
	'mount' => {
		label_key => 'MOUNT',
	},
);
my $available_filters = join(', ', map({
	$filters{$_}->{accepted_values}?
		"$_ (".join(', ', keys(%{$filters{$_}->{accepted_values}})).')':
		$_
}sort(keys(%filters))));


### Initialize the plugin
my $plugin = Nagios::Plugin->new( 
	shortname => "FREEBSD",
    usage => "Usage: check_freebsd_open_files "
    	    ."-w <warning_threshold> -c <critical_threshold> [--help] "
			."[-f filter] [-t timeout] [-v]",
	version => '0.1.0',
	url     => 'http://fragmentedzen.com/software/check_freebsd',
	license => 'This nagios plugin is free software, and comes with '
			  ."ABSOLUTELY NO WARRANTY.\nIt may be used, redistributed "
			  ."and/or modified under the terms of the \nGNU General "
			  .'Public Licence. See LICENSE.txt for more information.',
	plugin  => 'check_freebsd_open_files',
	extra	=> "\nAvailable filters: $available_filters.\n"
);


### Add arguments for warning, critical, and measurement
$plugin->add_arg(
	spec => 'warning|w=s',
	help => "-w, --warning=INTEGER\n   Threshold at which this measurement "
		   .'should generate a WARNING condiiton',
	required => 1,
);
$plugin->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical=INTEGER\n   Threshold at which this measurement "
		   .'should generate a CRITICAL condiiton',
	required => 1,
);
$plugin->add_arg(
	spec => 'filter|f=s',
	help => "-f --filter=KEY:VALUE\n   Filters open files where a given key equals a given value.",
);


### Parse command line options
$plugin->getopts;
$plugin->set_thresholds(
	warning => $plugin->opts->warning,
	critical => $plugin->opts->critical,
);
print 'Dump of $plugin: ' . Dumper($plugin) if $plugin->opts()->verbose >= 3;


### Make sure we have all of the command line arguments we need
my ($filter_key, $filter_value) = ('','');
if($plugin->opts->filter){
	if($plugin->opts->filter !~ /:/) {
		my $response = 'Malformed filter: ' . $plugin->opts->filter;
		print "$response\nFilters should be a key-value pair, such as "
			  . "'user:root', 'command:init', or 'mount:/'\n\n"
			  if $plugin->opts->verbose >= 2;
		$plugin->nagios_exit(UNKNOWN, $response);
	}
	($filter_key, $filter_value) = split /:/, $plugin->opts->filter;
	unless($filter_key && $filter_value) {
		my $response = 'Malformed filter: ' . $plugin->opts->filter;
		print "$response\nFilters should be a key-value pair, such as "
			  . "'user:root', 'command:init', or 'mount:/'\n"
			  . "Provided filter had no value following the colon.\n\n"
			  if $plugin->opts->verbose >= 2;
		$plugin->nagios_exit(UNKNOWN, $response);
	}
	if($filter_key && !$filters{$filter_key}) {
		my $response = 'Invalid filter: ' . $plugin->opts->filter;
		print "$response\nAvailable filters: $available_filters\n\n"
			  if $plugin->opts->verbose >= 2;
		$plugin->nagios_exit(UNKNOWN, $response);
	}
	if( ref $filters{$filter_key}->{accepted_values} eq 'HASH'){
		unless($filters{$filter_key}->{accepted_values}->{$filter_value}){
			my $response = 'Invalid filter value: ' . $plugin->opts->filter;
			print "$response\nAvailable values for $filter_key: "
				  .join(', ', keys(%{$filters{$filter_key}->{accepted_values}}))."\n\n"
				  if $plugin->opts->verbose >= 2;
			$plugin->nagios_exit(UNKNOWN, $response);
		}
	}
}

### Set timeout clock
alarm($plugin->opts()->timeout);
local $SIG{ALRM} = sub { 
	$plugin->nagios_exit( UNKNOWN, "Host timed out" );
};


### Make sure we can get to fstat(1)
unless( -e '/usr/bin/fstat'){
	$plugin->nagios_exit( UNKNOWN, "No fstat at /usr/bin/fstat");
}
unless( -f '/usr/bin/fstat'){
	my $error_message = 'Fstat at /usr/bin/fstat not a plain file.';
	print "$error_message\nMake sure fstat isn't a directory, symbolic link, named pipe, or block file\n"
		if $plugin->opts->verbose >=1;
	$plugin->nagios_exit( UNKNOWN, $error_message);
}
unless( -x '/usr/bin/fstat'){
	$plugin->nagios_exit( UNKNOWN, '/usr/bin/fstat is not executable');
}


### Pull and parse fstat(1)
my $fstat = `/usr/bin/fstat`||
	$plugin->nagios_exit( UNKNOWN, "Fstat returned status $?");
print "fstat response:\n$fstat\n\n" if $plugin->opts->verbose >= 3;
my @open_files = split /\n/,$fstat;
my @labels = split /\s+/,shift @open_files;
print scalar(@open_files)." files open\n" if $plugin->opts->verbose >= 2;
@open_files = map({
	### Collate @labels and @values into a hashref
	my @values = split /\s+/,$_;
	my $element = {};
	for(my $i = 0; $i < scalar(@labels); $i++){
		$element->{$labels[$i]} = $values[$i] || '';
	}
	$element;
} @open_files);

###
# N.B. At this point, @open_files looks like this:
#	(
#		{
#			'R/W' => 'r',
#			'INUM' => '2',
#			'FD' => 'root',
#			'PID' => '31274',
#			'CMD' => 'fstat',
#			'MOUNT' => '/',      
#			'SZ|DV' => '512',
#			'USER' => 'dann',
#			'MODE' => 'drwxr-xr-x'
#		},
#		{
#			'R/W' => 'r',
#			'INUM' => '11258205',
#			...
#		},
#	);
###


### Stop here unless fstat(1) gave us something
unless(scalar(@open_files)){
	my $response = "No usable data in fstat(1) response";
	print "$response:\n$fstat\n\n" 
		if $plugin->opts->verbose >= 2;
	$plugin->nagios_exit(UNKNOWN, $response);
}


### Parse count and check thresholds
my ($value,$status_message);
if($plugin->opts->filter){
	$value = grep({$_->{$filters{$filter_key}->{label_key}} eq $filter_value} @open_files);
	$status_message = "$value open files with $filter_key $filter_value";
} else {
	$value = scalar(@open_files);
	$status_message = "$value open files";
}


### Prepare Performance Data
$plugin->add_perfdata(
	label => $plugin->opts->filter?$plugin->opts->filter:'open',
	value => $value,
	uom => ' files',
	threshold => $plugin->threshold
);


### Return the status message
my $status_code = $plugin->check_threshold($value);
$plugin->nagios_exit( $status_code, $status_message ) 
	if $status_code != OK;
$plugin->nagios_exit( OK, $status_message );


=head1 DESCRIPTION

This script acts as a plugin module for the Nagios IT infrastructure monitoring 
system. It on a FreeBSD server to pull status information on open files,
allowing queries based on file descriptor, mode, mount, process, and user:

=over 4

=item * descriptor (tr, wd, jail, text, root, mmap)

This option will filter by the process file table entry special descriptor of the opened file as listed in the fstat(1) man page:

	jail    - jail root directory
	mmap    - memory-mapped file
	root    - root inode
	text    - executable text inode
	tr      - kernel trace file
	wd      - current working directory

=item * mode

This option will filter by the mode of the opened file: 'w' for write, 'r' for read, and 'rw' for read and write.

=item * mount

This option will filter by the system mount on which the file is open, such as C<-f mount:/usr>

=item * process

This option will filter by the process that opened the file, such as C<-f process:httpd>

=item * user

This option will filter by the username owning the process that opened the file, such as C<-f user:root>.

=back

This has been tested with FreeBSD 7.1. 

=head1 SYNOPSIS

=head2 Command Line Interface

Get the total number of open files:

	check_freebsd_open_files -w 800 -c 1000

Get the number of files opened by a given user:

	check_freebsd_open_files -w 800 -c 1000 -f user:root

Get the number of files opened by a process name:

	check_freebsd_open_files -w 800 -c 1000 -f process:httpd

Get the number of files opened with command line options stored in a configuration file:

	check_freebsd_open_files --extra-opts=my_config.ini

=head2 Running within Nagios

In objects/commands.cfg:

	define command{
	    command_name    check_freebsd_open_files
	    command_line    $USER1$/check_freebsd_open_files -c $ARG1$ -w $ARG2$
	}

	define command{
	    command_name    check_freebsd_open_files_filtered
	    command_line    $USER1$/check_freebsd_open_files -c $ARG1$ -w $ARG2$ -f $ARG3$
	}

In the configuration file for your host running FreeBSD and either Nagios or NPRE:

	define service{
	    use                   local-service
	    host_name             your.hostname.com
	    service_description   FreeBSD Open Files
	    check_command         check_freebsd_open_files!800!1000
	}

	define service{
	    use                   local-service
	    host_name             your.hostname.com
	    service_description   FreeBSD Open Files by Root
	    check_command         check_freebsd_open_files_filtered!800!1000!user:root
	}

	define service{
	    use                   local-service
	    host_name             your.hostname.com
	    service_description   FreeBSD Open Files by HTTPD
	    check_command         check_freebsd_open_files_filtered!800!1000!process:httpd
	}

=head1 SEE ALSO

If using an external configuration file, it should be structured according to 
the specification at <http://nagiosplugins.org/extra-opts/>.

Thresholds given to this script should be in the format specified at 
<http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT>.

This module is built upon L<Nagios::Plugin> by the Nagios Plugin Development
Team.  Further reading on Nagios, NPRE, and Nagios Plugins is available at
<http://nagios.com/>.

=head1 AUTHOR

This script is written and maintained by Dann Stayskal <dann@stayskal.com>
and is available on his website, at
<http://fragmentedzen.com/software/check_freebsd/>.

=head1 LICENSE

Copyright (C) 2009 by Dann Stayskal.

This program is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation; either version 2 of the License, or (at your option) any later 
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
Place, Suite 330, Boston, MA 02111-1307 USA

Nagios, the Nagios logo, and Nagios graphics are the servicemarks, trademarks, 
or registered trademarks owned by Nagios Enterprises. All other servicemarks 
and trademarks are the property of their respective owner.

=cut
